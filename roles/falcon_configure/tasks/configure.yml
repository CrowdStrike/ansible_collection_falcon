---
- name: Linux Block
  when: ansible_facts['distribution'] != "MacOSX"
  block:
    - name: CrowdStrike Falcon | Configure Falcon Sensor Options (Linux)
      crowdstrike.falcon.falconctl:
        cid: "{{ options.cid }}"
        provisioning_token: "{{ options.provisioning_token }}"
        apd: "{{ options.apd }}"
        aph: "{{ options.aph }}"
        app: "{{ options.app }}"
        trace: "{{ options.trace }}"
        feature: "{{ options.feature }}"
        message_log: "{{ options.message_log }}"
        billing: "{{ options.billing }}"
        tags: "{{ options.tags }}"
        backend: "{{ options.backend }}"
        state: "{{ 'present' if falcon_option_set else 'absent' }}"
      register: falconctl_result

    - name: CrowdStrike Falcon | Register Falcon Sensor Options
      crowdstrike.falcon.falconctl_info:
      register: info

    - name: CrowdStrike Falcon | Restart Falcon Sensor on Changes
      ansible.builtin.service:
        name: falcon-sensor
        state: "{{ falcon_service_state | default('restarted') }}"
        enabled: yes
      when:
        - info.falconctl_info.cid
        - falconctl_result.changed
      # noqa args[module]
      # noqa no-handler

    # Wait for aid to be generated
    - name: CrowdStrike Falcon | Wait for Falcon Sensor to Generate AID
      crowdstrike.falcon.falconctl_info:
        name:
          - aid
      register: info
      retries: 6
      delay: 10
      until: info.falconctl_info.aid
      when:
        - info.falconctl_info.cid
        - falconctl_result.changed
      # noqa no-handler

    - name: CrowdStrike Falcon | Remove Falcon Agent ID (AID) If Building A Primary Image
      crowdstrike.falcon.falconctl:
        aid: yes
        state: absent
      when:
        - falcon_remove_aid

# Start of MacOSX Configuration
- name: CrowdStrike Falcon | Stat Falcon Sensor (macOS)
  ansible.builtin.stat:
    path: "/Applications/Falcon.app/Contents/Resources/falconctl"
  register: falconctl_mac
  when: ansible_facts['distribution'] == "MacOSX"

- name: MacOSX Block
  when:
    - ansible_facts['distribution'] == "MacOSX"
    - falconctl_mac.stat.exists
  become: yes
  block:
    - name: CrowdStrike Falcon | Associate Falcon Sensor with your Customer ID (CID) (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl license {{ falcon_cid }}"
      when:
        - falcon_cid != None
        - not falcon_provisioning_token
      failed_when: falconctl_license.rc > 1
      register: falconctl_license
      changed_when: falconctl_license.rc == 0

    - name: CrowdStrike Falcon | Associate Falcon Sensor with your Provisioning Token (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl license {{ falcon_cid }} {{ falcon_provisioning_token }}"
      when:
        - falcon_cid != None
        - falcon_provisioning_token != None
      failed_when: falconctl_license.rc > 1
      register: falconctl_license_prov
      changed_when: falconctl_license_prov.rc == 0

    - name: CrowdStrike Falcon | Check status of Falcon Sensor (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl stats"
      failed_when: falconctl_stats.rc > 1
      register: falconctl_stats
      changed_when: false

    - name: CrowdStrike Falcon | Ensure Falcon Sensor is running (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl load"
      when:
        - falconctl_stats.rc != 0
      # noqa no-changed-when

    - name: CrowdStrike Falcon | Get Grouping Tags (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl grouping-tags get"
      register: falconctl_mac_tags_get
      when:
        - falcon_tags != None
      changed_when: falconctl_mac_tags_get.stdout != grouping_tags
      vars:
        grouping_tags: "Grouping tags: {{ falcon_tags }}"

    - name: CrowdStrike Falcon | Set Grouping Tags (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl grouping-tags set {{ falcon_tags }}"
      when:
        - falcon_tags != None
        - falconctl_mac_tags_get.changed
        - falcon_option_set
      register: falconctl_mac_tags_set
      changed_when: falconctl_mac_tags_set.stdout == "Grouping tags updated successfully."
      # noqa no-handler

    - name: CrowdStrike Falcon | Clear Grouping Tags (macOS)
      ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl grouping-tags clear"
      when:
        - falcon_tags != None
        - not falcon_option_set
      register: falconctl_mac_tags_clear
      changed_when: falconctl_mac_tags_clear.stdout == "Grouping tags updated successfully."

    - name: CrowdStrike Falcon | Restart Falcon Sensor on Changes (macOS)
      ansible.builtin.shell: |
        /Applications/Falcon.app/Contents/Resources/falconctl unload
        /Applications/Falcon.app/Contents/Resources/falconctl load
      when:
        - falconctl_mac_tags_set.changed or falconctl_mac_tags_clear.changed
      # noqa no-changed-when
      # noqa no-handler
