---
- block:
  - name: "CrowdStrike Falcon | Validate Required API URL Is Defined"
    ansible.builtin.fail:
      msg: "falcon_cloud is not configured! Please configure falcon_cloud and re-run the installation again!"
    when: not falcon_cloud

  - name: "CrowdStrike Falcon | Validate CrowdStrike API Client ID Is Defined"
    ansible.builtin.fail:
      msg: "falcon_client_id is not configured! Please configure falcon_client_id and re-run the installation again!"
    when: not falcon_client_id

  - name: "CrowdStrike Falcon | Validate CrowdStrike API Client Secret Is Defined"
    ansible.builtin.fail:
      msg: "falcon_client_secret is not configured! Please configure falcon_client_secret and re-run the installation again!"
    when: not falcon_client_secret

  - name: "CrowdStrike Falcon | Validate CrowdStrike Falcon Sensor version is correctly set"
    ansible.builtin.fail:
      msg: "falcon_sensor_version_decrement must be an integer between 0 and 5 inclusive!"
    when: falcon_sensor_version_decrement | int < 0 or falcon_sensor_version_decrement | int > 5

  when: falcon_install_method == "api"

- name: "CrowdStrike Falcon | Configure Python Interpreter for older Linux OSes"
  ansible.builtin.set_fact:
    ansible_python_interpreter: /usr/bin/python
  when: ansible_distribution == "Amazon"

- name: "CrowdStrike Falcon | Default Operating System configuration"
  ansible.builtin.set_fact:
    falcon_target_os: "{{ ansible_distribution }}"
    falcon_os_family: "{{ ansible_system | lower }}"
    falcon_os_version: "{{ ansible_distribution_major_version }}"
    falcon_sensor_update_policy_platform: "{{ ansible_system }}"

- name: "CrowdStrike Falcon | Determine if Endpoint Operating System Is RHEL, CentOS, or Oracle Linux"
  ansible.builtin.set_fact:
    falcon_target_os: RHEL/CentOS/Oracle
  when: ansible_os_family == "RedHat"

- name: "CrowdStrike Falcon | Determine if Target OS Is Amazon Linux"
  ansible.builtin.set_fact:
    falcon_target_os: "Amazon Linux"
  when: ansible_distribution == "Amazon"

- name: "CrowdStrike Falcon | Determine if Target OS Is Amazon Linux ARM architecture"
  ansible.builtin.set_fact:
    falcon_os_version: "2 - arm64"
  when: ansible_distribution == "Amazon" and ansible_machine == "aarch64"

- name: "CrowdStrike Falcon | Endpoint Operating System Detected Is Debian"
  ansible.builtin.set_fact:
    falcon_os_version: "9/10"
  when:
    - ansible_distribution == "Debian"

- name: "CrowdStrike Falcon | Endpoint Operating System Detected Is Ubuntu"
  ansible.builtin.set_fact:
    falcon_os_version: "16/18/20"
  when:
    - ansible_distribution == "Ubuntu"

- name: CrowdStrike Falcon | Determine if Target OS Is MacOS
  ansible.builtin.set_fact:
    falcon_target_os: "macOS"
    falcon_os_family: "mac"
    falcon_path: "/Applications/Falcon.app/Contents/Resources/"
    falcon_os_version: ""
    falcon_sensor_update_policy_platform: "{{ falcon_os_family | capitalize }}"
  when: ansible_distribution == "MacOSX"

- name: "CrowdStrike Falcon | Endpoint Operating System Detected Is Microsoft Windows"
  ansible.builtin.set_fact:
    falcon_os_version: ""
    falcon_target_os: "Windows"
    falcon_sensor_update_policy_platform: "{{ ansible_os_family }}"
  when: ansible_os_family == "Windows"

- name: CrowdStrike Falcon | Set default sensor name
  ansible.builtin.set_fact:
    installed_sensor: falcon-sensor
  when:
    - ansible_pkg_mgr is defined
    - ansible_pkg_mgr in linux_packagers

- name: CrowdStrike Falcon | Set default sensor name for non-Windows installations
  ansible.builtin.set_fact:
    falcon_sensor_pkg: "{{ installed_sensor }}"
  when:
    - ansible_pkg_mgr is defined
    - ansible_pkg_mgr in linux_packagers
    - falcon_sensor_download is not defined

- name: CrowdStrike Falcon | Verify Temporary Install Directory Exists (non-Windows)
  ansible.builtin.tempfile:
    path: "{{ falcon_install_tmp_dir }}"
    state: directory
    suffix: falcon
  when:
    - ansible_system == "Linux" or ansible_system == "Darwin"
    - falcon_install_tmp_dir is defined
  register: falcon_install_temp_directory
  changed_when: no

- name: CrowdStrike Falcon | Verify Temporary Install Directory Exists (Windows)
  ansible.windows.win_tempfile:
    path: "{{ falcon_windows_tmp_dir }}"
    state: directory
    suffix: falcon
  when:
    - ansible_os_family == "Windows"
    - falcon_windows_tmp_dir is defined
  register: falcon_install_win_temp_directory
  changed_when: no

- name: CrowdStrike Falcon | Verify Falcon is not already installed (macOS)
  ansible.builtin.stat:
    path: "{{ falcon_path }}"
  when:
    - ansible_system == "Darwin"
    - falcon_path is defined
  register: falcon_already_installed

- name: CrowdStrike Falcon | Set service state for Primary Images
  ansible.builtin.set_fact:
    falcon_service_state: stopped
  when:
    - falcon_remove_agent_id
